#!/bin/bash 
#@author Eugene Tseytlin (University of Pittsburgh)

# do some parameter checking
if [ -z $2 ];
then
    PROG=`basename $0` 
    echo "Usage: ${PROG} <dir1> [dir2] ... [dirN] <target dir>"
    echo "Transfer LAMS data to a unified directory structure"    
	exit 1
fi
TARGET="${!#}"
for DIR in $@
do
	if [ $DIR == $TARGET ]; then
		continue
	fi 	
	# convert to absolute path
	DIR=$(cd $DIR;pwd)
	DIR="${DIR}/"
	# figure out input site from second directory
	SITE=pitt
	SUBJECT=$(basename $DIR)
	TARGET_DIR="$TARGET/$SITE/$SUBJECT"
	# create output directory
	if [ ! -e $TARGET_DIR ]; then
		mkdir -p $TARGET_DIR
	fi
	
	# now, if PITT do a simple copy of select directory
	echo "copying $DIR .."
	if [ $SITE == "pitt" ]; then
		# go over subdirectories of interests
		SUBDIRS=$(find $DIR -type 'd' -name 'lams*' | grep -vE 'dti_68_[A-Z].*')
		for SD in $SUBDIRS
		do
			SF=$(basename $SD |  sed -e 's/_[0-9]*x[0-9]*\.[0-9]*//g')
			mkdir $TARGET_DIR/$SF
			# convert dicom images to an appropriate dir
			dcm2nii -c n -g n -o $TARGET_DIR/$SF $SD
		done
		# copy BHV data???
		cp $DIR/BHV_*/*DynamicFaces*.[et]* $TARGET_DIR/lams_dynfaces
		cp $DIR/BHV_*/*blockreward*.[et]* $TARGET_DIR/lams_reward/
		cp $DIR/BHV_*/EFNBACK*-1.[et]* $TARGET_DIR/lams_efnback_X2/
		cp $DIR/BHV_*/EFNBACK*-2.[et]* $TARGET_DIR/lams_efnback_X2/
		cp $DIR/BHV_*/Resting*.[et]* $TARGET_DIR/lams_resting_state/
		# resting ??? missing? emotion????
		
	elif [ $SITE == "case" ]; then
		# envoke DCM2NII on the IMG dir
		dcm2nii -c n -g n -o $TARGET_DIR $DIR/IMG_*
		
		# now hard-code each directory and move images there
		mkdir $TARGET_DIR/lams_sagittal_mprage 2> /dev/null
		mv $TARGET_DIR/*lamssagittalmprage*.nii $TARGET_DIR/lams_sagittal_mprage
		
		mkdir $TARGET_DIR/lams_dynfaces 2> /dev/null
		mv $TARGET_DIR/*lamsdynfaces*.nii $TARGET_DIR/lams_dynfaces
		cp $DIR/BHV_*/*DynamicFaces*.[et]* $TARGET_DIR/lams_dynfaces
		
		mkdir $TARGET_DIR/lams_reward/ 2> /dev/null
		mv $TARGET_DIR/*lamsreward*.nii $TARGET_DIR/lams_reward
		cp $DIR/BHV_*/*blockreward*.[et]* $TARGET_DIR/lams_reward
	
		FL=($TARGET_DIR/*lamsdti68*.nii)
		DT=$(basename ${FL[0]} .nii)
		mkdir $TARGET_DIR/lams_dti_68/ 2> /dev/null
		mv $TARGET_DIR/$DT.[nb]* $TARGET_DIR/lams_dti_68/
	
		FL=($TARGET_DIR/*lamsefnback*.nii)
		mkdir $TARGET_DIR/lams_efnback_X2/ 2> /dev/null
		mv ${FL[0]} $TARGET_DIR/lams_efnback_X2/
		cp $DIR/BHV_*/EFNBACK*-1.[et]* $TARGET_DIR/lams_efnback_X2/
		
		mkdir $TARGET_DIR/lams_efnback_X2/ 2> /dev/null
		mv ${FL[1]} $TARGET_DIR/lams_efnback_X2/
		cp $DIR/BHV_*/EFNBACK*-2.[et]* $TARGET_DIR/lams_efnback_X2/
	
		mkdir $TARGET_DIR/lams_resting_state/ 2> /dev/null
		mv $TARGET_DIR/*lamsrestingstate*.nii $TARGET_DIR/lams_resting_state/
		cp $DIR/BHV_*/Resting*.[et]* $TARGET_DIR/lams_resting_state/
		
		FL=($TARGET_DIR/*lamsgrefieldmapping*.nii)
		mkdir $TARGET_DIR/lams_gre_field_mapping/ 2> /dev/null
		mv ${FL[0]} $TARGET_DIR/lams_gre_field_mapping/
		
		mkdir $TARGET_DIR/lams_gre_field_mapping/ 2> /dev/null
		mv ${FL[1]} $TARGET_DIR/lams_gre_field_mapping/
		
		# remove excess nifti images
		rm $TARGET_DIR/*.nii
		
	elif [ $SITE == "cinci" ]; then
	
		# now hard-code each directory and move images there
		mkdir $TARGET_DIR/lams_sagittal_mprage 2> /dev/null
		cp $DIR/$SUBJECT/NIFTI/*lams_sagittal_mprage*.nii $TARGET_DIR/lams_sagittal_mprage
		
		mkdir $TARGET_DIR/lams_dynfaces 2> /dev/null
		cp $DIR/$SUBJECT/NIFTI/*lams_dynfaces*.nii $TARGET_DIR/lams_dynfaces
		cp $DIR/BHV_*/*DynamicFaces*.[et]* $TARGET_DIR/lams_dynfaces
		
		mkdir $TARGET_DIR/lams_reward/ 2> /dev/null
		cp $DIR/$SUBJECT/NIFTI/*lams_reward*.nii $TARGET_DIR/lams_reward/
		cp $DIR/BHV_*/*blockreward*.[et]* $TARGET_DIR/lams_reward/
	
		FL=($DIR/$SUBJECT/NIFTI/*dti_68*.nii)
		DT=$(basename ${FL[0]} .nii)
		mkdir $TARGET_DIR/lams_dti_68/ 2> /dev/null
		cp $DIR/$SUBJECT/NIFTI/$DT.[nb]* $TARGET_DIR/lams_dti_68/
	
		FL=($DIR/$SUBJECT/NIFTI/*lams_efnback*.nii)
		mkdir $TARGET_DIR/lams_efnback_X2/ 2> /dev/null
		cp ${FL[0]} $TARGET_DIR/lams_efnback_X2/
		cp $DIR/BHV_*/EFNBACK*-1.[et]* $TARGET_DIR/lams_efnback_X2/
		
		mkdir $TARGET_DIR/lams_efnback_X2/ 2> /dev/null
		cp ${FL[1]} $TARGET_DIR/lams_efnback_X2/
		cp $DIR/BHV_*/EFNBACK*-2.[et]* $TARGET_DIR/lams_efnback_X2/
	
		mkdir $TARGET_DIR/lams_resting_state/ 2> /dev/null
		cp $DIR/$SUBJECT/NIFTI/*lams_resting_state*.nii $TARGET_DIR/lams_resting_state/
		cp $DIR/BHV_*/Resting*.[et]* $TARGET_DIR/lams_resting_state_448x448.17/
		
		FL=($DIR/$SUBJECT/NIFTI/*GRE_Map*.nii)	
		mkdir $TARGET_DIR/lams_gre_field_mapping/ 2> /dev/null
		cp ${FL[0]} $TARGET_DIR/lams_gre_field_mapping/
		
		mkdir $TARGET_DIR/lams_gre_field_mapping/ 2> /dev/null
		cp ${FL[1]} $TARGET_DIR/lams_gre_field_mapping/
	
	else
		echo "Error: unrecognized site $SITE for $DIR"
		continue
	fi
	
	# rename all NIFTI files
	for SD in $TARGET_DIR/*
	do
		SF=$(basename $SD)
		for SUFFIX in edat2 edat txt
		do
			FL=($SD/*.$SUFFIX)
			if [ "${#FL[@]}" -gt 1 ]; then
				N=1
				for F in ${FL[@]}
				do 
					mv $F $SD/${SUBJECT}_${SF}_task.${N}.$SUFFIX 2> /dev/null 
					N=$[$N + 1]
				done
			else
				mv $SD/*.$SUFFIX $SD/${SUBJECT}_${SF}_task.$SUFFIX 2> /dev/null
			fi 
		done 
		for SUFFIX in nii bvec bval
		do
			FL=(`ls -t $SD/*.$SUFFIX 2> /dev/null `)
			# handle single image			
			if [ "${#FL[@]}" -eq 1 ]; then
				mv $SD/*.$SUFFIX $SD/${SUBJECT}_${SF}.$SUFFIX 2> /dev/null
			# handle anatomical image			
			elif [ "${#FL[@]}" -eq 3 ]  && [[ ${FL[0]} == *"mprage"* ]]; then			
				mv ${FL[0]} $SD/${SUBJECT}_${SF}_crop.nii 2> /dev/null
				mv ${FL[1]} $SD/${SUBJECT}_${SF}_orient.nii 2> /dev/null
				mv ${FL[2]} $SD/${SUBJECT}_${SF}.nii 2> /dev/null		
			# handle more then 1 image		
			else				
				N=1
				for F in ${FL[@]}
				do 
					mv $F $SD/${SUBJECT}_${SF}.${N}.$SUFFIX 2> /dev/null 
					N=$[$N + 1]
				done
			fi 
		done 
	done
	
done
