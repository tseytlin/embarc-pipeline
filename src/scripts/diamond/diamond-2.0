#!/bin/bash
# Henry Chase (University of Pittsburgh), 
# Eugene Tseytlin (University of Pittsburgh)
# init project variables

VERSION="2.0"
SCRIPT_DIR=`dirname $0`
PROG_FILE=`basename $0`

# do some parameter checking
if [ -z $1 ];
then
    PROG=`basename $0` 
    echo "Usage: ${PROG} [-dynamic_faces|-efnback_1|-efnback_2|-reward_1|-reward_2|-resting_state] <dir1> ...[dirN]"
    echo "Run an DIAMOND 2.0 analysis pipeline on the set of subject data directories." 
exit 1
fi

# some params
FLAGS=""
DATA_DIR_LIST=""


# go over each dataset one at a time
for D in $@
do

	# skip some flags
	if [ $D == "-dynamic_faces" -o $D == "-reward" -o $D == "-efnback" -o $D == "-resting_state" ];
	then
		FLAGS="${FLAGS} ${D}"
	elif [ -d $D ];then
		DATA_DIR_LIST="${DATA_DIR_LIST} ${D}"
	elif [ -f $D ];then
		DATA_DIR_LIST=$(cat $D)
	fi
done




# go over each dataset one at a time
for DATA_DIR in $DATA_DIR_LIST
do

	# skip some flags
	if [ $DATA_DIR == "-dynamic_faces" -o $DATA_DIR == "-reward_1" -o $DATA_DIR == "-reward_2" -o $DATA_DIR == "-efnback_1" -o $DATA_DIR == "-efnback_2" -o $DATA_DIR == "-resting_state" ];
	then
		FLAGS="${FLAGS} ${DATA_DIR}"
		continue
	fi	
	
	# get some info
	NAME=`basename $DATA_DIR`
	USERNAME=`echo $NAME | awk -F '.' '{print $2}'`
	PLACE=`echo $USERNAME | cut -c 1-2`
	DT=`date`
	METAFILE=${DATA_DIR}/status.txt
	VERSION_FILE=${DATA_DIR}/version.txt
	DATA_DIR_PATH=`(cd $DATA_DIR;pwd)`
	
	# make sure that this is a valid data directory
	if [ ! -d ${DATA_DIR}/anat ];
	then
		echo "Error: ${DATA_DIR} does not seem to be a valid embarc subject directory" 2>&1 | tee -a $LOG_FILE
		exit 1;
	fi
	
	# save version file
	if [ ! -e $VERSION_FILE ]; then
		echo $VERSION > $VERSION_FILE 
	fi
	
	# check version file
	VER=`cat $VERSION_FILE`
	if [ $VERSION != $VER ]; then
		echo "Error: It seems that ${DATA_DIR} was already processed by embarc-2.0 version $VER" 2>&1 | tee -a $LOG_FILE
		exit 1;
	fi
	
	
	# create a log file
	if [ ! -d $LOG_DIR ];
	then
	    mkdir $LOG_DIR
	fi
	# transfer.subject.N.log
	# find empty log file
	i=1
	LOG_FILE="${LOG_DIR}/diamond.${USERNAME}.${i}.log" 
	while [ -e $LOG_FILE ] 
	do
	   let "i=i+1"
	   LOG_FILE="${LOG_DIR}/diamond.${USERNAME}.${i}.log" 
	done
	LOG_NAME=`basename $LOG_FILE`
	

	echo "+------------------------------------------------------------" > $LOG_FILE 2>&1
	echo "|  Script:      ${SCRIPT_DIR}/diamond-2.0 " >> $LOG_FILE 2>&1
	echo "|  Description: run DIAMOND analysys pipeline for a subject" >> $LOG_FILE 2>&1
	echo "|  Start:       ${DT} " >> $LOG_FILE 2>&1
	echo "|  Argument:    ${DATA_DIR_PATH} " >> $LOG_FILE 2>&1
	echo "|  Subject:     ${USERNAME} " >> $LOG_FILE 2>&1
	echo "|  Institution: ${PLACE} " >> $LOG_FILE 2>&1
	echo "|  Flags:       ${FLAGS} " >> $LOG_FILE 2>&1
	echo "|  Version:     ${VERSION} " >> $LOG_FILE 2>&1
	echo "+------------------------------------------------------------" >> $LOG_FILE 2>&1
	echo " " >> $LOG_FILE 2>&1
	echo "Running an DIAMOND pipeline for ${USERNAME} from ${PLACE} .." 2>&1 | tee -a $LOG_FILE
	
	# if metafile is not there, generate one
	#if [ ! -e $METAFILE ];
	#then
	#	metafile.sh -create $DATA_DIR
	#fi
	
	# now make sure that acpc was done
	#ACPC_COUNT=`find $DATA_DIR -name '*.acpc.*' | wc -l`
	#if [ "$ACPC_COUNT" -ge 6 ];
	#then
	#	metafile.sh -update $DATA_DIR process.acpc
	#else
	#	for x in $DATA_DIR/dicom_* 
	#	do 
	#		ls $x/*.acpc.* > /dev/null 2>&1;  
	#		if [ $? -ne 0 ]; 
	#		then 
	#			y=`basename $x`
	#			echo "Warning: AC/PC reorientation was not performed on ${USERNAME}/${y}" | tee -a $LOG_FILE
	#		fi; 
	#	done
	#
	#fi

	# uncompact this folder
	#uncompact.sh $DATA_DIR 2>&1 | tee -a $LOG_FILE

	# call an EMBARC script
	(time diamond.py $FLAGS $DATA_DIR) 2>&1 | tee -a $LOG_FILE
	echo "" 2>&1 | tee -a $LOG_FILE

	# create overal PDF and CSV at the subject directory
	echo "collecting results in CSV .." 2>&1 | tee -a $LOG_FILE
	(cat $DATA_DIR/output/*/csv/*.csv > $DATA_DIR/${USERNAME}_results.csv) 2>&1 | tee -a $LOG_FILE

	# concatanate all PS files as 1 PDF
	echo "compiling analysis PDF .." 2>&1 | tee -a $LOG_FILE
	(cd $DATA_DIR; psmerge -ot.ps output/*/ps/*.ps; ps2pdf t.ps ${USERNAME}_analysis.pdf; rm t.ps)  2>&1 | tee -a $LOG_FILE

	# create logs directory if not there
	if [ ! -e ${DATA_DIR}/logs ];
	then
		mkdir ${DATA_DIR}/logs
	fi
	
	# copy log file there
	#cat $LOG_FILE > ${DATA_DIR}/logs/$LOG_NAME
	col -b < $LOG_FILE > ${DATA_DIR}/logs/$LOG_NAME
	
	#echo "changing ownership of the output directory ..." 
	#chgrp -R embarc ${DATA_DIR}  2>&1 | tee -a $LOG_FILE
	#chmod -R ug+w   ${DATA_DIR}  2>&1 | tee -a $LOG_FILE
	#chmod -R o-wrx  ${DATA_DIR}  2>&1 | tee -a $LOG_FILE
	
	# make an error summary
	echo "--------------------------------------------------------" 2>&1 | tee -a ${DATA_DIR}/logs/$LOG_NAME
	grep Error $LOG_FILE 2>&1 | tee -a ${DATA_DIR}/logs/$LOG_NAME
	echo "--------------------------------------------------------" 2>&1 | tee -a ${DATA_DIR}/logs/$LOG_NAME
	grep Warning $LOG_FILE 2>&1 | tee -a ${DATA_DIR}/logs/$LOG_NAME
	echo "--------------------------------------------------------" 2>&1 | tee -a ${DATA_DIR}/logs/$LOG_NAME
	echo " " | tee -a ${DATA_DIR}/logs/$LOG_NAME
	echo "Done!" | tee -a ${DATA_DIR}/logs/$LOG_NAME
	
	
	# email the log file
	if [ $EMAIL ];
	then
		mail -s "EMBARC analysis on ${USERNAME}" $EMAIL < ${DATA_DIR}/logs/$LOG_NAME
	fi
done
#reset
